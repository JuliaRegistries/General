# This workflow updates feeds when the label `new package` is applied to PRs.
name: Send to feeds
on:
  pull_request:
    types: [ labeled ]
jobs:
  update-feed:
    if: ${{ github.event.label.name == 'new package' && github.repository == github.event.pull_request.head.repo.full_name }}
    runs-on: ubuntu-latest
    steps:
    - uses: julia-actions/setup-julia@latest
      with:
        version: 1.6.2
    - name: Send to Slack
      shell: julia --color=yes {0}
      run: |
        endpoint = ENV["SLACK_ENDPOINT"]
        if isempty(endpoint)
          @info "Endpoint not specified; missing secret? Exiting."
          exit(0)
        end
    
        pr_url = string("https://github.com/", env["GITHUB_REPOSITORY"], "/pull/", env["PR_NUMBER"])
        body = env["PR_BODY"]

        name = r"(?:^|\n|\r\n)(?:\-|\*) Registering package: (\w*?)(?:$|\n|\r\n)"
        repo = r"(?:^|\n|\r\n)(?:\-|\*) Repository: (.*?)(?:$|\n|\r\n)"
        description = r"(?:^|\n|\r\n)(?:\-|\*) Description: (.*?)(?:$|\n|\r\n)"
        release_notes = r"(?:^|\n|\r\n)(?:\-|\*) Release notes:(?:\s*?)(?:$|\n|\r\n)<!-- BEGIN RELEASE NOTES -->((?s).*)<!-- END RELEASE NOTES -->"

        text = sprint() do io
            match_name = match(name, body)
            has_name = match_name !== nothing
            match_description = match(description, body)
            has_description = match_description !== nothing

            match_release = match(release_notes, body)
            has_release = match_release !== nothing

            match_repo = match(repo, body)
            has_repo = match_repo !== nothing

            if has_description && has_name
                println(io, match_name[1], ": ", strip(match_description[1]))
            elseif has_name
                println(io, match_name[1])
            elseif has_description
                println(io, strip(match_description[1]))
            end
            if has_release
                if has_description || has_name
                    println(io)
                end
                println(io, "Release notes:")
                println(io, strip(match_release[1]))
            end
            if has_repo
                if has_name || has_description || has_release
                    println(io) # separate by an extra line
                end
                println(io, "Repository: ", strip(match_repo[1]))
            end
            # Nothing? Just print the `pr_url`
            if match_description === match_release === match_repo === nothing
                println(io, pr_url)
            end
        end

        using Pkg
        Pkg.activate(mktempdir())
        Pkg.add(name="Slack", version="0.1")
        using Slack
        data = Dict("attachments" =>
                    [Dict("fallback" => ENV["PR_NAME"],
                          "color" => "#36a64f",
                          "title" => ENV["PR_NAME"],
                          "title_link" => pr_url,
                          "text" => text,
                      )])

        if !startswith(endpoint, "/")
            endpoint = string("/", endpoint)
        end
        @info "Told Slack: $(data)"
        response = sendattachmenttoslack(data, endpoint)
        @info "Slack said: $response"
      env:
        SLACK_ENDPOINT: ${{ secrets.JULIALANGSLACKENDPOINT }}
        PR_NAME: ${{ github.event.pull_request.title }}
        PR_NUMBER: ${{ github.event.number }}
        PR_BODY: ${{ github.event.pull_request.body }}
