name: CI
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:
env:
    JULIA_PKG_USE_CLI_GIT: true
permissions:
  contents: read
jobs:
  CI:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.3'
          - '1.4'
          - '1.5'
          - '1.6'
          - '1.7'
          # - '1.8' # TODO: uncomment this line once Julia 1.9.0 is released
          - '~1.9.0-0' # TODO: delete this line once Julia 1.9.0 is released
          - '1'
          - 'nightly'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - uses: julia-actions/setup-julia@f40c4b69330df1d22e7590c12e76dc2f9c66e0bc # v1.9.2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - run: write(ENV["GITHUB_OUTPUT"], "manifest_version=$(VERSION.major).$(VERSION.minor)")
        shell: julia --color=yes --project=.ci/ {0}
        id: manifest_version
      - run: echo "The manifest is .ci/Manifest.${{ steps.manifest_version.outputs.manifest_version }}.toml"
      - run: rm -rf .ci/Manifest.toml
      - run: mv .ci/Manifest.${{ steps.manifest_version.outputs.manifest_version }}.toml .ci/Manifest.toml
      - run: rm -rf .ci/Manifest.*.toml
      - run: chmod 400 .ci/Project.toml
      - run: chmod 400 .ci/Manifest.toml
        if: ${{ matrix.version != 'nightly' }}
      - name: Cache artifacts and packages
        uses: actions/cache@6998d139ddd3e68c71e9e398d8e40b71a2f39812 # v3.2.5
        env:
          cache-name: cache-artifacts
        with:
          path: |
            ~/.julia/artifacts
            ~/.julia/packages
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/.ci/Manifest.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - run: julia --color=yes -e 'import Pkg; Pkg.Registry.add("General")'
        env:
          JULIA_PKG_SERVER: ""
      - run: julia --color=yes -e 'import Pkg; Pkg.Registry.update()'
      - run: .ci/instantiate.sh
      - run: julia --color=yes --project=.ci/ -e 'import Pkg; Pkg.precompile()'
      - run: julia --color=yes --project=.ci/ -e 'import RegistryCI; RegistryCI.test()'
