name: AutoMerge
on:
  pull_request:
  schedule:
    # The cron job is just a fallback.
    # The "stopwatch" functionality that we have implemented should
    # ensure that an AutoMerge merge job is run at least every 8 minutes.
    # Therefore, it's sufficient for us to run the fallback job infrequently.
    # We will choose to run the fallback job every 4 hours.
    - cron:  '0 */4 * * *'
  workflow_dispatch:
env:
    JULIA_PKG_USE_CLI_GIT: true
jobs:
  AutoMerge:
    timeout-minutes: 60
    if: github.event_name != 'pull_request' || github.repository == github.event.pull_request.head.repo.full_name
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        version:
          - '1'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - uses: julia-actions/setup-julia@f40c4b69330df1d22e7590c12e76dc2f9c66e0bc # v1.9.2
        with:
          version: ${{ matrix.version }}
      - run: write(ENV["GITHUB_OUTPUT"], "manifest_version=$(VERSION.major).$(VERSION.minor)")
        shell: julia --color=yes --project=.ci/ {0}
        id: manifest_version
      - run: echo "The manifest is .ci/Manifest.${{ steps.manifest_version.outputs.manifest_version }}.toml"
      - run: rm -rf .ci/Manifest.toml
      - run: mv .ci/Manifest.${{ steps.manifest_version.outputs.manifest_version }}.toml .ci/Manifest.toml
      - run: rm -rf .ci/Manifest.*.toml
      - run: chmod 400 .ci/Project.toml
      - run: chmod 400 .ci/Manifest.toml
      - name: Cache artifacts
        uses: actions/cache@940f3d7cf195ba83374c77632d1e2cbb2f24ae68 # v3.3.0
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/.ci/Manifest.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - run: julia --color=yes -e 'import Pkg; Pkg.Registry.add("General")'
        env:
          JULIA_PKG_SERVER: ""
      - run: julia --color=yes -e 'import Pkg; Pkg.Registry.update()'
      - run: .ci/instantiate.sh
      - run: julia --color=yes --project=.ci/ -e 'import Pkg; Pkg.precompile()'
      - name: AutoMerge.run
        env:
          MERGE_NEW_PACKAGES: true
          MERGE_NEW_VERSIONS: true
          AUTOMERGE_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUTOMERGE_TAGBOT_TOKEN: ${{ secrets.TAGBOT_TOKEN }}
          JULIA_DEBUG: RegistryCI,AutoMerge
        run: |
          using RegistryCI
          using Dates

          RegistryCI.AutoMerge.run(
            merge_new_packages = ENV["MERGE_NEW_PACKAGES"] == "true",
            merge_new_versions = ENV["MERGE_NEW_VERSIONS"] == "true",
            new_package_waiting_period = Day(3),
            new_jll_package_waiting_period = Minute(20),
            new_version_waiting_period = Minute(10),
            new_jll_version_waiting_period = Minute(10),
            registry = "JuliaRegistries/General",
            tagbot_enabled = true,
            authorized_authors = String["JuliaRegistrator"],
            authorized_authors_special_jll_exceptions = String["jlbuild"],
            suggest_onepointzero = false,
            additional_statuses = String[],
            additional_check_runs = String[],
            check_license = true,
            public_registries = String["https://github.com/HolyLab/HolyLabRegistry"],
            point_to_slack = true,
          )
        shell: julia --color=yes --project=.ci/ {0}
  AutoMerge-stopwatch:
    timeout-minutes: 20
    if: github.event_name != 'pull_request' || github.repository == github.event.pull_request.head.repo.full_name
    environment: stopwatch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - uses: julia-actions/setup-julia@f40c4b69330df1d22e7590c12e76dc2f9c66e0bc # v1.9.2
        with:
          version: '1'
      - run: write(ENV["GITHUB_OUTPUT"], "manifest_version=$(VERSION.major).$(VERSION.minor)")
        shell: julia --color=yes --project=.ci/ {0}
        id: manifest_version
      - run: rm -rf .ci/Manifest.toml
      - run: mv .ci/Manifest.${{ steps.manifest_version.outputs.manifest_version }}.toml .ci/Manifest.toml
      - run: rm -rf .ci/Manifest.*.toml
      - run: chmod 400 .ci/Project.toml
      - run: chmod 400 .ci/Manifest.toml
      - name: Cache artifacts
        uses: actions/cache@940f3d7cf195ba83374c77632d1e2cbb2f24ae68 # v3.3.0
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/.ci/Manifest.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - run: julia --color=yes -e 'import Pkg; Pkg.Registry.add("General")'
        env:
          JULIA_PKG_SERVER: ""
      - run: julia --color=yes -e 'import Pkg; Pkg.Registry.update()'
      - run: .ci/instantiate.sh
      - run: julia --color=yes --project=.ci/ -e 'import Pkg; Pkg.precompile()'
      - run: julia --project=.ci/ .ci/stopwatch.jl
        env:
          AUTOMERGE_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUTOMERGE_TAGBOT_TOKEN: ${{ secrets.TAGBOT_TOKEN }}
